//This file is my attempt at making dynamic runtime shader loading with hot-reloading.
//Due to SPIR-V and some other issues with lifetimes i'm postponing it

use vulkano::instance::Instance;
use vulkano_win::VkSurfaceBuild;
use winit::event_loop::{ControlFlow, EventLoop};
use winit::window::{WindowBuilder};
use vulkano::instance::debug::{DebugCallback, MessageType};
use std::sync::Arc;


type WindowSurface = Arc<vk::swapchain::Surface<winit::window::Window>>; 
type WindowSwapchain = Arc<vk::swapchain::Swapchain<winit::window::Window>>; 
type WindowSwapchainImage = std::sync::Arc<vulkano::image::SwapchainImage<winit::window::Window>>;

const VALIDATION_LAYERS: &[&str] = &[
    "VK_LAYER_LUNARG_standard_validation"
];


#[cfg(all(debug_assertions))]
const ENABLE_VALIDATION_LAYERS: bool = true;

#[cfg(not(debug_assertions))]
const ENABLE_VALIDATION_LAYERS: bool = false;

fn setup_debug_callback(instance: &Arc<Instance>) -> Option<DebugCallback> {
    if !ENABLE_VALIDATION_LAYERS {
        return None;
    }

    let msg_types = MessageType {
        general: true,
        validation: true,
        performance: true
    };

    DebugCallback::new(&instance, vulkano::instance::debug::MessageSeverity::errors_and_warnings(), msg_types, |msg| {
        println!("Vulkan validation: {:?}", msg.description)
    }).ok()
}

fn check_validation_layer_support() -> bool {
    let layers: Vec<_> = vulkano::instance::layers_list()
        .unwrap()
        .map(|x| x.name().to_owned())
        .collect();
    
    VALIDATION_LAYERS.iter().all(|layer_name| layers.contains(&layer_name.to_string()))
}

fn create_vulkan_instance() -> Arc<vulkano::instance::Instance> {

    let extensions_supported_by_core = vulkano::instance::InstanceExtensions::supported_by_core().unwrap();
    println!("Extensions supported by core: {:?}", extensions_supported_by_core);

    let app_info = vulkano::instance::ApplicationInfo {
        application_name: Some(std::borrow::Cow::from("Minicraft")),
        application_version: Some(vulkano::instance::Version {
            major: 1,
            minor: 0,
            patch: 0
        }),
        engine_name: Some(std::borrow::Cow::from("No engine")),
        engine_version: Some(vulkano::instance::Version {
            major: 1,
            minor: 0,
            patch: 0
        }),
    };

    let mut extensions = vulkano_win::required_extensions();
    if ENABLE_VALIDATION_LAYERS {
        println!("Required by vulkano_win: {:?}", extensions);
    }

    if ENABLE_VALIDATION_LAYERS && check_validation_layer_support() {
        println!("Creating debug instance");
        extensions.ext_debug_utils = true;
        let instance = vulkano::instance::Instance::new(Some(&app_info), vk::Version::V1_1, &extensions, None);
        return instance.expect("Failed to create Vulkan instance");
    } else {
        let instance = vulkano::instance::Instance::new(Some(&app_info), vk::Version::V1_1, &extensions, VALIDATION_LAYERS.iter().cloned());
        return instance.expect("Failed to create Vulkan instance");
    }
}

fn rate_device_suitability(device: vulkano::instance::PhysicalDevice) -> u32 {
    let features = device.supported_features();
    
    if !features.geometry_shader {
        return 0;
    }

    use vulkano::instance::PhysicalDeviceType;

    let mut score: u32 = 0;

    let properties: &vk::device::Properties = device.properties();

    match properties.device_type.unwrap() {
        PhysicalDeviceType::DiscreteGpu => score += 1000,
        PhysicalDeviceType::IntegratedGpu => score += 500,
        PhysicalDeviceType::VirtualGpu => score += 100,
        PhysicalDeviceType::Cpu => score += 10,
        PhysicalDeviceType::Other => score += 1,
    };

    score += properties.max_image_dimension2_d.unwrap_or(0);

    return score;
}

fn get_physical_device(instance: &Arc<Instance>) -> vk::instance::PhysicalDevice {

    let all_devices = vulkano::instance::PhysicalDevice::enumerate(instance);
    for device in all_devices.clone() {
        let device_type = device.properties().device_type;
        let device_name = device.properties().device_name.clone().unwrap();
        println!("Device found: ${:?}, type: {:?}", device_name, device_type);
    }

    let mut devices_ranked_by_suitability: Vec<_> = all_devices
        .clone()
        .map(|x| (x, rate_device_suitability(x)))
        .collect();

    devices_ranked_by_suitability.sort_by(|(_, rate1), (_, rate2)| rate1.cmp(rate2));
    devices_ranked_by_suitability.reverse();

    let (device, _) = devices_ranked_by_suitability[0];
    return device;
}


#[derive(Copy, Clone)]
struct QueueFamilyIndices {
    graphics_family: Option<u32>,
    present_family: Option<u32>,
}

use vulkano as vk;

impl QueueFamilyIndices {

    fn is_complete(&self) -> bool {
        if self.graphics_family.is_some() && self.present_family.is_some() {
            return true;
        }
        return false;
    }

    fn find_queue_families(
        device: vk::instance::PhysicalDevice, 
        surface: &Arc<vk::swapchain::Surface<winit::window::Window>>    
    ) -> QueueFamilyIndices {
        let mut queue_family_indices = QueueFamilyIndices {
            graphics_family: None,
            present_family: None
        };
        
        for (i, queue_family) in device.queue_families().enumerate() {
            if queue_family.supports_graphics() {
                queue_family_indices.graphics_family = Some(i as u32)
            }
            if surface.is_supported(queue_family).unwrap_or(false) {
                queue_family_indices.present_family = Some(i as u32)
            }

            if queue_family_indices.is_complete() {
                break
            }
        }

        return queue_family_indices;        
    }
}

fn create_logical_device(device: vk::instance::PhysicalDevice, indices: QueueFamilyIndices) -> (Arc<vk::device::Device>, Arc<vk::device::Queue>, Arc<vk::device::Queue>) {
    let queue_family = device.queue_families().nth(indices.graphics_family.unwrap() as usize).unwrap();
    let extensions_supported_by_chosen_device = vk::device::DeviceExtensions::supported_by_device(device);
    println!("Extensions supported by {}: {:?}", device.properties().device_name.clone().unwrap(), extensions_supported_by_chosen_device);
    println!("Features supported by {}: {:?}", device.properties().device_name.clone().unwrap(), device.supported_features());
    
    let device_extensions = vk::device::DeviceExtensions {
        khr_swapchain: true,
        .. vk::device::DeviceExtensions::none()
    };    
    
    let (device, mut queues) = vk::device::Device::new(
        device, 
        &vk::device::Features::none(),
        &vk::device::DeviceExtensions::required_extensions(device).union(&device_extensions),
        [(queue_family, 1.0)].iter().cloned()).unwrap();
    
    let graphics_queue = queues.next().unwrap();
    let present_queue = queues.next().unwrap_or_else(|| graphics_queue.clone());

    return (device, graphics_queue, present_queue)
}

struct SwapchainSupportDetails { capabilities: vk::swapchain::Capabilities }

fn get_swapchain_support_details(device: vk::instance::PhysicalDevice, surface: &WindowSurface) -> SwapchainSupportDetails {
    let capabilities = surface.capabilities(device);
    return SwapchainSupportDetails { capabilities: capabilities.unwrap() };
}

fn find_optimal_format(details: &SwapchainSupportDetails) -> (vk::format::Format, vk::swapchain::ColorSpace) {

    let optimal_format = vk::format::Format::B8G8R8A8Srgb;
    let optimal_space = vk::swapchain::ColorSpace::SrgbNonLinear;

    let optimal_found = details.capabilities.supported_formats
        .iter()
        .find(|(format, space)| *format == optimal_format && *space == optimal_space);

    match optimal_found {
        Some(_) => return (optimal_format, optimal_space),
        None => details.capabilities.supported_formats[0]
    }
}

const TRY_MAILBOX : bool = true;
const TRY_IMMEDIATE : bool = true;
fn find_optimal_present_mode(details: &SwapchainSupportDetails) -> vk::swapchain::PresentMode {
    if details.capabilities.present_modes.mailbox && TRY_MAILBOX {
        vk::swapchain::PresentMode::Mailbox
    } else if details.capabilities.present_modes.immediate && TRY_IMMEDIATE {
        vk::swapchain::PresentMode::Immediate
    } else {
        vk::swapchain::PresentMode::Fifo
    }
}
const WIDTH: u32 = 800;
const HEIGHT: u32 = 600;
fn find_swap_extent(details: &SwapchainSupportDetails) -> [u32; 2] {
    if let Some(extent) = details.capabilities.current_extent {
        return extent;
    } else {
        let mut actual_extent = [WIDTH, HEIGHT];
        actual_extent[0] = details.capabilities.min_image_extent[0].max(
            details.capabilities.max_image_extent[0].min(WIDTH)
        );
        actual_extent[1] = details.capabilities.min_image_extent[1].max(
            details.capabilities.max_image_extent[1].min(HEIGHT)
        );
        return actual_extent;
    }
}

fn create_swapchain(logical_device: &Arc<vk::device::Device>, 
                    device: vk::instance::PhysicalDevice,
                    surface: &WindowSurface,
                    queue_family: QueueFamilyIndices
                ) -> (WindowSwapchain, Vec<WindowSwapchainImage>) {



    let capabilities = get_swapchain_support_details(device, &surface);
    let swapchain_adequate = !capabilities.capabilities.supported_formats.is_empty() 
        && !(capabilities.capabilities.present_modes == vk::swapchain::SupportedPresentModes::none());

    if !swapchain_adequate {
        panic!("Graphics card chosen does not have adequate swapchain capabilities");
    }

    let mut image_count = capabilities.capabilities.min_image_count + 1;
    if let Some(max) = capabilities.capabilities.max_image_count  {
        if image_count > max {
            image_count = max;
        }
    }
    println!("Will request {} images", image_count);

    let (format, color_space) = find_optimal_format(&capabilities);
    println!("Format and color space: {:?}", (format, color_space));

    let presentation = find_optimal_present_mode(&capabilities);
    println!("Presentation mode: {:?}", presentation);

    let extent = find_swap_extent(&capabilities);
    println!("Swapchain extent: {:?}", extent);

    let image_use = vk::image::ImageUsage {
        color_attachment: true, //VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
        .. vk::image::ImageUsage::none()
    };

    let has_to_use_concurrent = queue_family.graphics_family != queue_family.present_family;
    let sharing_mode = if has_to_use_concurrent {
        vk::sync::SharingMode::Concurrent(vec![2])
    } else {
        vk::sync::SharingMode::Exclusive
    };


    let composite_alpha = vk::swapchain::CompositeAlpha::Opaque;//means "no alpha" which is weird that the tutorial wants us to use it
    let fullscreen_exclusive = vk::swapchain::FullscreenExclusive::Default;//means "no alpha" which is weird that the tutorial wants us to use it
    let clip_invisible_window_pixels = true; //if another window is on top of ours, then we don't render the obscured pixels

    let swapchain_builder = vk::swapchain::Swapchain::start(logical_device.clone(), surface.clone());
    let (swapchain, images) = swapchain_builder
        .num_images(image_count)
        .format(format)
        .dimensions(extent)
        .layers(1)
        .usage(image_use)
        .sharing_mode(sharing_mode)
        .transform(capabilities.capabilities.current_transform)
        .composite_alpha(composite_alpha)
        .present_mode(presentation)
        .fullscreen_exclusive(fullscreen_exclusive)
        .clipped(clip_invisible_window_pixels)
        .color_space(color_space)
        .build().expect("Could not create swapchain!");
    /*

    let (swapchain, images) = 
    
    (
        logical_device.clone(),
        surface.clone(),
        image_count, 
        format,
        extent,
        1, //layers: always 1
        image_use,
        sharing_mode,
        capabilities.capabilities.current_transform,
        composite_alpha, 
        
        presentation,
        fullscreen_exclusive,
        clip_invisible_window_pixels,
        color_space
    ).expect("Could not create swapchain!");*/


    
    println!("Swapchain created!");

    return (swapchain, images);
}


mod vertex_shader {
    vulkano_shaders::shader! {
        ty: "vertex",
        path: "./src/shaders/vertex.glsl"
    }
}


mod fragment_shader {
    vulkano_shaders::shader! {
        ty: "fragment",
        path: "./src/shaders/fragment.glsl"
    }
}
//type AbstractRenderPass = dyn vk::framebuffer::RenderPassAbstract + Send + Sync;

type Framebuffer = dyn vk::render_pass::FramebufferAbstract + Send + Sync;
type MinicraftGraphicsPipeline = dyn vk::pipeline::GraphicsPipelineAbstract + Send + Sync;

use std::io;
use std::io::prelude::*;
use std::fs::File;

fn make_shader_module(device: Arc<vk::device::Device>, path: &str) -> Arc<vk::pipeline::shader::ShaderModule> {
    let mut f = std::fs::File::open(path).expect("Shader path not found");
    let mut v = vec![];
    vulkano_shaders::read_file_to_string(full_path: &Path)
    f.read_to_end(&mut v).expect("Could not read file!");
    unsafe { vk::pipeline::shader::ShaderModule::new(device.clone(), &v)}.unwrap()
}

fn build_shaders<'a>(
    vs: &'a Arc<vk::pipeline::shader::ShaderModule>,
    fs: &'a Arc<vk::pipeline::shader::ShaderModule>) -> Result<(vk::pipeline::shader::GraphicsEntryPoint<'a>, vk::pipeline::shader::GraphicsEntryPoint<'a>), std::io::Error> {


    //describe format
    let vertex_input = unsafe {
       vk::pipeline::shader::ShaderInterface::new_unchecked(vec![
            vk::pipeline::shader::ShaderInterfaceEntry {
                location: 0 .. 1,
                format: vk::format::Format::R32G32Sfloat,
                name: Some(std::borrow::Cow::Borrowed("color"))
            },
            vk::pipeline::shader::ShaderInterfaceEntry {
                location: 1 .. 2,
                format: vk::format::Format::R32G32B32Sfloat,
                name: Some(std::borrow::Cow::Borrowed("position"))
            }
       ])
    };

    let vertex_output = unsafe {
        vk::pipeline::shader::ShaderInterface::new_unchecked(vec![
            vk::pipeline::shader::ShaderInterfaceEntry {
                location: 0 .. 1,
                format: vk::format::Format::R32G32B32Sfloat,
                name: Some(std::borrow::Cow::Borrowed("vertexColor"))
            }
        ])
    };

    //describe layout
    let vertex_layout = vk::pipeline::layout::PipelineLayoutDesc::new(
        vec![], vec![]).unwrap(); //descriptor sets = [], push constants = []

    let fragment_input = unsafe {
        vk::pipeline::shader::ShaderInterface::new_unchecked(vec![
                vk::pipeline::shader::ShaderInterfaceEntry {
                    location: 0 .. 1,
                    format: vk::format::Format::R32G32B32Sfloat,
                    name: Some(std::borrow::Cow::Borrowed("vertexColor"))
                }
        ])
    };

    let fragment_output = unsafe {
        vk::pipeline::shader::ShaderInterface::new_unchecked(vec![
            vk::pipeline::shader::ShaderInterfaceEntry {
                location: 0 .. 1,
                format: vk::format::Format::R32G32B32A32Sfloat,
                name: Some(std::borrow::Cow::Borrowed("outColor"))
            }
        ])
    };

   //describe layout
    let fragment_layout = vk::pipeline::layout::PipelineLayoutDesc::new(
        vec![], vec![]).unwrap(); //descriptor sets = [], push constants = []

    use vulkano::pipeline::shader::SpecializationConstants;
    let vert_main = unsafe {
        vs.graphics_entry_point(
            std::ffi::CStr::from_bytes_with_nul_unchecked(b"main\0"), 
            vertex_layout, 
            <()>::descriptors(), 
            vertex_input,
            vertex_output, 
            vk::pipeline::shader::GraphicsShaderType::Vertex,
        )
    };

    let frag_main = unsafe {
        fs.graphics_entry_point(
            std::ffi::CStr::from_bytes_with_nul_unchecked(b"main\0"), 
            fragment_layout, 
            <()>::descriptors(), 
            fragment_input,
            fragment_output, 
            vk::pipeline::shader::GraphicsShaderType::Fragment,
        )
    };


    Ok((vert_main, frag_main))
}

fn create_graphics_pipeline(device: &Arc<vk::device::Device>, swapchain: &WindowSwapchain) -> 
    (Arc<MinicraftGraphicsPipeline>, Arc<vk::render_pass::RenderPass>) {

    let vs_module = make_shader_module(device.clone(), "./src/shaders/vertex.glsl");
    let fs_module = make_shader_module(device.clone(), "./src/shaders/fragment.glsl");
    let (vs, fs) = build_shaders(&vs_module, &fs_module).unwrap();

 
    let dimensions = swapchain.dimensions();
   

    let render_pass = create_render_pass(&device, swapchain.format());

    let pipeline_builder = 
        vk::pipeline::GraphicsPipeline::start()
        .vertex_input_single_buffer::<Vertex>() 
        .vertex_shader(vs, ())
        /*VkPipelineInputAssemblyStateCreateInfo inputAssembly{};
        inputAssembly.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
        inputAssembly.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
        inputAssembly.primitiveRestartEnable = VK_FALSE;*/
        .triangle_list()
        .viewports_dynamic_scissors_irrelevant(1)
        .primitive_restart(false)
        /*
        VkPipelineViewportStateCreateInfo viewportState{};
        viewportState.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
        viewportState.viewportCount = 1;
        viewportState.pViewports = &viewport;
        viewportState.scissorCount = 1;
        viewportState.pScissors = &scissor;
        */
        //.viewports(vec![viewport])
        .fragment_shader(fs, ())
        /*
        VkPipelineRasterizationStateCreateInfo rasterizer{};
        rasterizer.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
        rasterizer.depthClampEnable = VK_FALSE;
        rasterizer.polygonMode = VK_POLYGON_MODE_FILL;
        rasterizer.lineWidth = 1.0f;
        rasterizer.cullMode = VK_CULL_MODE_BACK_BIT;
        rasterizer.frontFace = VK_FRONT_FACE_CLOCKWISE;
        */
        .depth_clamp(false)
        .polygon_mode_fill() //can we change this to render wireframe?
        .line_width(1.0) //
        .cull_mode_back()
        .front_face_clockwise() //I always assumed in opengl it was counter-clockwise
        /*
        VkPipelineColorBlendStateCreateInfo colorBlending{};
        colorBlending.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
        colorBlending.logicOpEnable = VK_FALSE;
        colorBlending.logicOp = VK_LOGIC_OP_COPY; // Optional
        colorBlending.attachmentCount = 1;
        colorBlending.pAttachments = &colorBlendAttachment;
        colorBlending.blendConstants[0] = 0.0f; // Optional
        colorBlending.blendConstants[1] = 0.0f; // Optional
        colorBlending.blendConstants[2] = 0.0f; // Optional
        colorBlending.blendConstants[3] = 0.0f; // Optional
        */
        .blend_pass_through()
        .render_pass(vk::render_pass::Subpass::from(render_pass.clone(), 0).unwrap());
    

    let result = pipeline_builder.build(device.clone()).unwrap();
    (Arc::new(result), render_pass.clone())
}


fn create_render_pass(device: &Arc<vk::device::Device>, color_format: vk::format::Format) -> Arc<vk::render_pass::RenderPass> {
    
    //it's unfortunate that vulkano decided a macro would be ideal. 
    //There are only a few details here to fill up, and it doesn't seem macros really give any benefit.
    //Macro stuff also isn't indexed by Rust-analyzer, the syntax isn't predictable. 
    //IMO heavy use of macros in this situation only makes things hard to figure out using only Rust tools.
    //Like, for the shaders it's ok.

    let result = Arc::new(
        vk::single_pass_renderpass!(
            device.clone(),
            attachments: {
                color: {
                    load: Clear,
                    store: Store,
                    format: color_format,
                    samples: 1,
                }
            },
            pass: {
                color: [color],
                depth_stencil: {}
            }
        ).unwrap()
    );

    return result;
}

//Arc<MinicraftGraphicsPipeline>, Arc<vk::render_pass::RenderPass>
fn create_framebuffers(render_pass: &Arc<vk::render_pass::RenderPass>, images: &[WindowSwapchainImage]) 
    -> Vec<(Arc<Framebuffer>, WindowSwapchainImage)> {
    return images.iter()
    .map(|image| {
        let view = vk::image::view::ImageView::new(image.clone()).unwrap();
        (Arc::new(
            vk::render_pass::Framebuffer::start(render_pass.clone())
            .add(view)
            .unwrap()
            .build()
            .unwrap()
        ) as Arc<Framebuffer>, image.clone())
    }).collect();
}



fn setup_command_framebuffers(
    window_context: &WindowContext, 
    swapchain: &WindowSwapchain, 
    images: &[WindowSwapchainImage]
) -> Vec<Arc<vk::command_buffer::PrimaryAutoCommandBuffer>> {
   
    let physical_device = window_context.physical_device();
    let (pipeline, render_pass) = create_graphics_pipeline(&window_context.logical_device, 
        &swapchain);
    println!("Created graphics pipeline");

    let framebuffers = create_framebuffers(&render_pass, &images);
    println!("Created {} framebuffers", framebuffers.len());

    let queue_family = physical_device.queue_families().nth(window_context.family_indices.graphics_family.unwrap() as usize).unwrap();
    let cloned_logical_device = window_context.logical_device.clone();
    let cloned_pipe = pipeline.clone();
    let command_buffers = framebuffers.iter()
        .map(|framebuffer_img: &(Arc<Framebuffer>, WindowSwapchainImage)| {
            let (framebuffer, img) = framebuffer_img;
            let dimensions = img.dimensions();

            let subpass_contents = vk::command_buffer::SubpassContents::Inline;
            let mut dynamic_state = vk::command_buffer::DynamicState::none();
            let viewport = vk::pipeline::viewport::Viewport {
                origin: [0.0, 0.0],
                dimensions: [dimensions[0] as f32, dimensions[1] as f32],
                depth_range: 0.0 .. 1.0
            };
            dynamic_state.viewports = Some(vec![viewport]); 
            let mut command_buffer_builder = vk::command_buffer::AutoCommandBufferBuilder::primary(
                cloned_logical_device.clone(), queue_family.clone(), vk::command_buffer::CommandBufferUsage::SimultaneousUse).unwrap();
            
            command_buffer_builder
                .begin_render_pass(framebuffer.clone(), subpass_contents, vec![[0.0, 0.0, 0.0, 1.0].into()])
                .unwrap()
                .draw(cloned_pipe.clone(), &dynamic_state,
                    vec![window_context.vertex_buffer.clone()], (), (), vec![])
                .unwrap()
                .end_render_pass()
                .unwrap();

            let buffer = Arc::new(command_buffer_builder.build().unwrap());
            return buffer;
        }).collect();

    return command_buffers
}

fn setup_graphics(window_context: &WindowContext) -> VulkanGraphicsSetup {
 
    let physical_device = window_context.physical_device();

    let (swapchain, images) = create_swapchain(&window_context.logical_device, 
        physical_device, &window_context.surface, window_context.family_indices);

    println!("Created swapchain: {:?} with {} images", swapchain, images.len());
    let command_buffers = setup_command_framebuffers(window_context, &swapchain, &images);

    VulkanGraphicsSetup {
        swapchain: swapchain.clone(),
        command_buffers: command_buffers
    }
}

fn recreate_graphics(current_context: &WindowContext, current_graphics: &VulkanGraphicsSetup, width: u32, height: u32) -> VulkanGraphicsSetup {
    let (swapchain, images) = current_graphics.swapchain.recreate().dimensions([width, height]).build().unwrap();
    println!("Recreated swapchain: {:?} with {} images", swapchain, images.len());
  
    let command_buffers = setup_command_framebuffers(current_context, &swapchain, &images);
    
    VulkanGraphicsSetup {
        swapchain: swapchain.clone(),
        command_buffers: command_buffers
    }
}

struct VulkanGraphicsSetup {
    swapchain: Arc<vk::swapchain::Swapchain<winit::window::Window>>,
    command_buffers: Vec<Arc<vk::command_buffer::PrimaryAutoCommandBuffer>>
}


struct WindowContext {
    instance: Arc<vk::instance::Instance>,
    physical_device_index: usize,
    surface: Arc<vk::swapchain::Surface<winit::window::Window>>,
    logical_device: Arc<vk::device::Device>,
    graphics_queue: Arc<vk::device::Queue>,
    present_queue: Arc<vk::device::Queue>,
    family_indices: QueueFamilyIndices,
    vertex_buffer: Arc<dyn vk::buffer::BufferAccess + Send + Sync>
}

impl WindowContext {
    fn physical_device(&self) -> vk::instance::PhysicalDevice {
        return vk::instance::PhysicalDevice::from_index(&self.instance, self.physical_device_index).unwrap();
    }

    fn new() -> (WindowContext, winit::event_loop::EventLoop<()>) {
        let instance = create_vulkan_instance();
        setup_debug_callback(&instance.clone());

        let event_loop = EventLoop::new();
        let surface: WindowSurface = WindowBuilder::new()
            .build_vk_surface(&event_loop, instance.clone())
            .unwrap();

        let physical_device = get_physical_device(&instance);

        println!("Chosen device: {}", physical_device.properties().device_name.as_ref().unwrap());
    
        let queue_family_indices = QueueFamilyIndices::find_queue_families(physical_device, &surface);
        let (logical_device, graphics_queue, present_queue) = create_logical_device(physical_device, queue_family_indices);


        let vertices = vec![
            Vertex::new([0.0, -0.5], [1.0, 0.0, 0.0]),
            Vertex::new([0.5, 0.5], [0.0, 1.0, 0.0]),
            Vertex::new([-0.5, 0.5], [0.0, 0.0, 1.0])
        ];
        
        let vertex_buffer = vk::buffer::cpu_access::CpuAccessibleBuffer::from_iter(
            logical_device.clone(),
            vk::buffer::BufferUsage::vertex_buffer(), false, 
            vertices.iter().cloned()
        ).unwrap();
    
        let window_context = WindowContext {
            instance: instance.clone(),
            surface: surface,
            physical_device_index: physical_device.index(),
            graphics_queue: graphics_queue,
            present_queue: present_queue,
            logical_device: logical_device,
            family_indices: queue_family_indices,
            vertex_buffer: vertex_buffer
        };

        return (window_context, event_loop);
    }
}


#[derive(Copy, Clone, Default)]
struct Vertex {
    position: [f32; 2],
    color   : [f32; 3]
}

impl Vertex {
    fn new(pos: [f32; 2], color: [f32; 3]) -> Self {
        Vertex {
            position: pos, color: color
        }
    }
}

vk::impl_vertex!(Vertex, position, color);



fn main() {
    let (window_context, event_loop) = WindowContext::new();
    let mut graphics_setup = setup_graphics(&window_context);

    let mut recreate_swapchain = false;
    let mut prev = std::time::SystemTime::now();
    let mut frame = 0u64;
    let mut resize_width = 0;
    let mut resize_height = 0;



    event_loop.run(move |event, _, control_flow| {
        match event {
            winit::event::Event::WindowEvent  { event: winit::event::WindowEvent::CloseRequested, .. } => {
                println!("Closed requested!");
                *control_flow  = ControlFlow::Exit;
            },
            winit::event::Event::WindowEvent  { event: winit::event::WindowEvent::Resized(size), .. } => {
                println!("Resized to {:?}! Will recreate swapchain", size);
                resize_width = size.width;
                resize_height = size.height;
                recreate_swapchain = true;
            },
            
            winit::event::Event::MainEventsCleared => {
                
                let current = std::time::SystemTime::now();
                let time_elapsed = current.duration_since(prev).unwrap(); 
                let milis = time_elapsed.as_secs_f64() * 1000.0f64;
                if frame % 100 == 0 {
                    if milis == 0.0 {
                        println!("fps: infinite, elapsed: {:?}", milis);
                    } else {
                        println!("fps: {:?}, elapsed: {:?}", 1000.0 / milis, milis);
                    }
                }

                prev = current;
                frame = frame + 1;

               

                //println!("Redraw Events");
                let acquire_result = vk::swapchain::acquire_next_image(graphics_setup.swapchain.clone(), None);
                use vk::sync::GpuFuture;
                match acquire_result {
                    Ok((image_idx, suboptimal, acquire_future)) => {
                        if suboptimal {
                            println!("Suboptimal! will recreate swapchain");
                            recreate_swapchain = true;
                        } else {
                            let command_buffer = graphics_setup.command_buffers[image_idx].clone();

                            let future = acquire_future
                                .then_execute(window_context.graphics_queue.clone(), command_buffer)
                                .unwrap()
                                .then_swapchain_present(window_context.present_queue.clone(), graphics_setup.swapchain.clone(), image_idx)
                                .then_signal_fence_and_flush();
    
                            match future {
                                Err(vk::sync::FlushError::OutOfDate) => {
                                    println!("Aquire is out of date! Maybe will recreate swapchain in the next events.");
                                    //recreate_swapchain = true
                                },
                                Err(e) => panic!("Error on acquire_future: {:?}", e),
                                Ok(f) => {
                                    f.wait(None).unwrap();
                                }
                            }
                        }
                    },
                    Err(vulkano::swapchain::AcquireError::OutOfDate) => {
                        recreate_swapchain = true;
                        println!("Command buffer out of date! will recreate swapchain");
                    }
                    Err(e) => {
                        println!("Acquire error: {:?}", e);
                    }
                  
                }
                //limit FPS to 100
                std::thread::sleep(std::time::Duration::from_millis(10));

            },
            winit::event::Event::RedrawEventsCleared => { },
            winit::event::Event::RedrawRequested(_) => {
                

            },
            winit::event::Event::NewEvents(_) => {},
            winit::event::Event::WindowEvent { event : winit::event::WindowEvent::CursorMoved{ position, ..}, .. } => {
                println!("Mouse moved: {:?}", position)
            },
            winit::event::Event::WindowEvent { event : winit::event::WindowEvent::AxisMotion{ ..}, .. } => { },
            winit::event::Event::DeviceEvent { .. } => { },
            e => {
                println!("Window Event: {:?}", e)
            }
        }

        if recreate_swapchain {
            graphics_setup = recreate_graphics(&window_context, &graphics_setup, resize_width, resize_height);
            recreate_swapchain = false;
        }
      
    });
}